-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS group05.operator
(
    empolyee_id integer NOT NULL,
    name character varying(100) NOT NULL,
    email character varying(100),
    phone_num character varying(20),
    qualified boolean,
    last_course_date date,
    flight_hour double precision,
    valid_before_date date,
    required_train boolean,
    commercial_license bigint,
    PRIMARY KEY (empolyee_id)
);

COMMENT ON TABLE group05.operator
    IS 'The Drone Operator infomation
';

CREATE TABLE IF NOT EXISTS group05.flight_plan
(
    plan_id integer NOT NULL,
    operator_id integer NOT NULL,
    route_id integer,
    start_datetime timestamp without time zone,
    duration double precision,
    max_altitude double precision,
    shortest_distance double precision,
    dronelog_id integer,
    commercial_flight boolean,
    PRIMARY KEY (plan_id),
    CONSTRAINT dronelog_id UNIQUE (dronelog_id)
);

COMMENT ON TABLE group05.flight_plan
    IS 'flight plan';

CREATE TABLE IF NOT EXISTS group05.dronelog
(
    dronelog_id integer NOT NULL,
    drone_id integer,
    sensor_id integer,
    battery_id integer,
    max_flight_time double precision,
    payload double precision,
    batt_remain_log double precision,
    PRIMARY KEY (dronelog_id)
);

CREATE TABLE IF NOT EXISTS group05.battery
(
    battery_id integer NOT NULL,
    remaining_percentage double precision,
    start_use_date date,
    battery_model integer,
    PRIMARY KEY (battery_id)
);

CREATE TABLE IF NOT EXISTS group05.sensor
(
    sensor_id integer,
    calibrated_date date,
    sensor_model integer,
    PRIMARY KEY (sensor_id)
);

CREATE TABLE IF NOT EXISTS group05.drone_model
(
    drone_model integer,
    drone_weight double precision,
    sup_sensors integer[],
    sup_batt integer[],
    commercial_id integer[],
    PRIMARY KEY (drone_model)
);

CREATE TABLE IF NOT EXISTS group05.route
(
    route_id integer NOT NULL,
    path geometry,
    st_p geometry,
    route_to_uni geometry,
    PRIMARY KEY (route_id)
);

CREATE TABLE IF NOT EXISTS group05.drone
(
    drone_id integer,
    drone_model integer,
    commercial_id integer,
    PRIMARY KEY (drone_id)
);

CREATE TABLE IF NOT EXISTS group05.sensor_model
(
    sensor_model integer,
    weight double precision,
    max_altitude double precision,
    PRIMARY KEY (sensor_model)
);

CREATE TABLE IF NOT EXISTS group05.battery_model
(
    battery_model integer,
    weight double precision,
    total_capacity integer,
    PRIMARY KEY (battery_model)
);

CREATE TABLE IF NOT EXISTS group05.hos_hotel
(
    id integer,
    place_name character varying(100),
    fclass character varying(30),
    location geometry,
    PRIMARY KEY (id)
);

COMMENT ON TABLE group05.hos_hotel
    IS 'hospital and hotel data';

CREATE TABLE IF NOT EXISTS group05.heli_airport_55
(
    id integer,
    fclass character varying(20),
    area geometry,
    PRIMARY KEY (id)
);

COMMENT ON TABLE group05.heli_airport_55
    IS 'helipad and airport 5.5 km';

CREATE TABLE IF NOT EXISTS group05.place
(
    place_id integer,
    type character varying(50),
    location geometry,
    PRIMARY KEY (place_id)
);

CREATE TABLE IF NOT EXISTS group05.melbourne_road_vertices
(
    id integer,
    point geometry,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS group05.melborune_road_pgr
(
    id integer,
    source integer,
    target integer,
    cost double precision,
    agg_cost double precision
);

CREATE TABLE IF NOT EXISTS group05.melbourne_road_edge
(
    id integer,
    edge geometry,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS group05.flight_plan
    ADD FOREIGN KEY (operator_id)
    REFERENCES group05.operator (empolyee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS group05.flight_plan
    ADD FOREIGN KEY (route_id)
    REFERENCES group05.route (route_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS group05.flight_plan
    ADD CONSTRAINT dronelog_id FOREIGN KEY (dronelog_id)
    REFERENCES group05.dronelog (dronelog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS group05.dronelog
    ADD FOREIGN KEY (sensor_id)
    REFERENCES group05.sensor (sensor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS group05.dronelog
    ADD FOREIGN KEY (battery_id)
    REFERENCES group05.battery (battery_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS group05.dronelog
    ADD FOREIGN KEY (drone_id)
    REFERENCES group05.drone (drone_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS group05.battery
    ADD FOREIGN KEY (battery_model)
    REFERENCES group05.battery_model (battery_model) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS group05.sensor
    ADD FOREIGN KEY (sensor_model)
    REFERENCES group05.sensor_model (sensor_model) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS group05.drone
    ADD FOREIGN KEY (drone_model)
    REFERENCES group05.drone_model (drone_model) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;